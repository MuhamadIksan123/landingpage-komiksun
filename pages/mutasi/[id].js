/* eslint-disable react/no-unescaped-entities */
/* eslint-disable @next/next/no-img-element */
import React, { useEffect, useState } from 'react';
import Head from 'next/head';
import Button from '../../components/Button';
import Footer from '../../components/Footer';
import Navbar from '../../components/Navbar';
import { useRouter } from 'next/router';
import { getData, postData } from '../../utils/fetchData';
import moment from 'moment';
import { formatDate } from '../../utils/formatDate';
import Cookies from 'js-cookie';
import Link from 'next/link';
import Rating from 'react-rating-stars-component';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faBank } from '@fortawesome/free-solid-svg-icons';

export default function DetailOrder() {
  const router = useRouter();
  const { id } = router.query;

  const [detailOrder, setDetailOrder] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  const [alertColor, setAlertColor] = useState('');
  const [alertMessage, setAlertMessage] = useState('');
  const [displayedStatus, setDisplayedStatus] = useState('');

  useEffect(() => {
    const fetchData = async () => {
      const token = Cookies.get('token');

      if (!token) {
        router.push('/signin');
        return;
      }

      const reqOrder = await getData(`api/v1/status/${id}`);
      const resOrder = reqOrder.data;

      setDetailOrder(resOrder);
    };

    const fetchAllData = async () => {
      try {
        setIsLoading(true);
        await Promise.all([fetchData()]);
        setIsLoading(false);
      } catch (err) {
        // Tangani kesalahan jika ada
        setIsLoading(false);
        console.error('Error:', err);
      }
    };

    if (id) {
      fetchAllData();
    }

     switch (detailOrder.transaction_status) {
       case 'settlement':
         setAlertColor('success');
         setAlertMessage('Pembayaran Anda telah berhasil diproses!');
         setDisplayedStatus('Sukses');
         break;
       case 'pending':
         setAlertColor('warning');
         setAlertMessage('Pembayaran sedang menunggu konfirmasi.');
         setDisplayedStatus('Menunggu');
         break;
       case 'expire':
         setAlertColor('danger');
         setAlertMessage('Pembayaran Anda telah kadaluwarsa.');
         setDisplayedStatus('Kadaluwarsa');
         break;
       default:
         break;
     }
  }, [id, detailOrder.transaction_status]);

  

  const reloadData = () => {
    window.location.href = `/mutasi/${id}`;
  };

  const handleBack = () => {
      router.push(`/order`);
  };

  return (
    <>
      <Head>
        <title>Semina || Detail Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="bg-navy">
        <Navbar />
      </section>

      {isLoading ? ( // Tampilkan loader jika isLoading atau isDataLoaded bernilai true
        <div
          className="d-flex justify-content-center align-items-center"
          style={{ height: '200px' }}
        >
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
        </div>
      ) : (
        <div className="container my-5">
          <div className={`alert alert-${alertColor} text-center`}>
            <h2>Status Transaksi: {displayedStatus}</h2>
            <p className="lead">{alertMessage}</p>
          </div>

          <div className="row justify-content-center">
            <div className="col-md-6">
              <div className="card">
                <div className="card-header bg-primary text-white">
                  Detail Transaksi
                </div>
                <div className="card-body">
                  <ul className="list-group">
                    <li className="list-group-item">
                      <strong>Status Transaksi:</strong>{' '}
                      <span
                        className={`badge bg-${alertColor} ${
                          alertColor === 'warning' ? 'text-dark' : 'text-light'
                        }`}
                      >
                        {displayedStatus}
                      </span>{' '}
                    </li>
                    <li className="list-group-item">
                      <strong>Jumlah Yang Harus Dibayar:</strong> Rp.{' '}
                      <span className="fw-bold text-primary">
                        {parseFloat(detailOrder.gross_amount).toLocaleString(
                          'id-ID'
                        )}
                      </span>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>

          <div className="row justify-content-center mt-4">
            <div className="col-md-6">
              <div className="card">
                <div className="card-header bg-success text-white">
                  Informasi Virtual Account
                </div>
                <div className="card-body">
                  {detailOrder.va_numbers &&
                  detailOrder.va_numbers.length > 0 ? (
                    <div className="d-flex align-items-center mb-3">
                      <FontAwesomeIcon icon={faBank} className="bank-icon" />
                      <div>
                        <h5 className="mb-0">
                          Bank {detailOrder.va_numbers[0].bank}
                        </h5>
                        <p className="mb-0">Nomor Virtual Account:</p>
                        <p className="lead">
                          {detailOrder.va_numbers[0].va_number}
                        </p>
                      </div>
                    </div>
                  ) : (
                    <p>No virtual account information available.</p>
                  )}

                  <p className="mb-0">Pastikan Anda membayar sebelum:</p>
                  <p className="lead">{detailOrder.expiry_time}</p>
                </div>
              </div>
            </div>
          </div>

          <div className="row justify-content-center mt-4">
            <div className="col-md-6">
              <div className="text-center">
                <button
                  onClick={reloadData}
                  className="btn btn-primary btn-lg me-3"
                >
                  Segarkan
                </button>
                <button
                  onClick={handleBack}
                  className="btn btn-secondary btn-lg"
                >
                  Kembali
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <Footer />
    </>
  );
}
